#!/bin/bash
myPath=`readlink -f $0`
scpPath="$(dirname "$myPath")"
projPath="$(dirname "$scpPath")"
stkPath="${projPath}/projStk"
dbCmd="$1"
if [ -z "$1" ]; then
  dbCmd="help"
fi
if [ "$dbCmd" = "df" ]; then
    if [ -z "$3" ]; then
        path1="0source"
        echo "待对比的文件夹A未指定，默认设为${path1}"
    else
        path1="$3"
    fi
    if [ -z "$4" ]; then
        path2="2dev"
        echo "待对比的文件夹B未指定，默认设为${path2}"
    else
        path2="$4"
    fi
    python "${scpPath}/fdiff.py" -p "${stkPath}/${path1}" "${stkPath}/${path2}" "$2"
elif [ "$dbCmd" = "rmdup" ]; then
    if [ -z "$2" ]; then
        echo "Error: 待清理的目录名（参数1）未指定" >&2
        exit 1
    fi
    if [ -z "$3" ]; then
        echo "Error: 用于比较重复的目录名（参数2）未指定" >&2
        exit 1
    fi
    echo "待清理的目录名为：${stkPath}/$2"
    echo "用于比较重复的目录名为：${stkPath}/$3"
    echo "您是否希望继续？请输入 'y' 确认，输入其他取消。"
    read -r answer
    # 将输入转换为小写
    answer=$(echo "$answer" | tr '[:upper:]' '[:lower:]')
    # 判断输入是否为'y'
    if [ "$answer" = "y" ]; then
        python "${scpPath}/rmdup.py" -r "${stkPath}/$2" "${stkPath}/$3"
    else
        echo "未确认，脚本退出。"
        exit 1
    fi
elif [ "$dbCmd" = "mount" ]; then
    output=$(python "${scpPath}/mount.py" "$2" "${projPath}")
    status=$?
    # 检查Python脚本是否成功执行
    if [ $status -eq 0 ]; then
        # 如果Python脚本成功执行，那么执行它的输出
        echo "挂载文件夹$2"
        eval "$output"
    else
        # 如果Python脚本执行失败，打印错误消息并退出
        echo "Python script "${scpPath}/mount.py" exited with status $status"
        echo "$output"
        exit $status
    fi
elif [ "$dbCmd" = "unmount" ]; then
    output=$(python "${scpPath}/unmount.py" "$2" "${projPath}")
    status=$?
    # 检查Python脚本是否成功执行
    if [ $status -eq 0 ]; then
        # 如果Python脚本成功执行，那么执行它的输出
        echo "卸载文件夹$2"
        eval "$output"
    else
        # 如果Python脚本执行失败，打印错误消息并退出
        echo "Python script "${scpPath}/mount.py" exited with status $status"
        echo "$output"
        exit $status
    fi
elif [ "$dbCmd" = "fs" ]; then
    shift 1
    python "${scpPath}/manageFs.py" "$@"
elif [ "$dbCmd" = "cd" ]; then
    tagetPath=$(python "${scpPath}/changeDir.py" "${projPath}" "." "$2")
    echo "${tagetPath}"
elif [ "$dbCmd" = "pwd" ]; then
    echo "脚本的路径: ${myPath}"
    echo "python脚本的所在目录: ${scpPath}"
    echo "关联的项目路径: ${stkPath}"
elif [ "$dbCmd" = "help" ]; then
    echo "Common Line: mydev <pycmd> [<arg>], The available commands are:"
    echo "==> df [指定待比较的文件或文件夹，若不指定则直接对比projStk/0source和projStk/2dev] [待对比的文件夹A] [待对比的文件夹B]"
    python "${scpPath}/fdiff.py" -h
    echo "==> rmdup (projStk下待清理的目录名，如2dev) (projStk下用于比较重复的目录名，如0source)"
    python "${scpPath}/rmdup.py" -h
    echo "==> cd (跳转到ws或projStk下的目录。路径的匹配规则是全称优先，其次为文件夹名称匹配，最后是模式匹配)"
    python "${scpPath}/changeDir.py" -h
    echo "==> fs (指令[add|rm|enable|disable|method]；若没有指令，则列举出所有项目) （挂载文件夹名称，该文件夹需要在ws下存在且为空） （对于add参数需要提供projStk下的源目录列表，优先级由低到高）"
    python "${scpPath}/manageFs.py" -h
    echo "==> mount （挂载文件夹名称，该文件夹需要在ws下存在且为空，挂载方式根据mountLs.yaml文件指定；若为all，则指定挂载所有enalbe的项目）"
    echo "==> unmount （卸载文件夹名称）"
    echo "  pwd: Show the work directory of mydev. "
fi